;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                           ;;
;;        Program that computes the Nth fibonacci number                     ;;
;;                                                                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


extern printf
extern atoi

section .data
  neg : dd -1
  a : dd 0
  b : dd 1
  c : dd 0
  i : dd 1

section .bss
  inp : resd 2
  comp : resd 2

section .rodata
  output : db "%d", 10, 0
  out : db "hi", 10, 0

section .text
  global main

  main:
    push ebp
    mov ebp, esp

    mov esi, DWORD [esp + 12]

    .loop:
      ;push out
      ;call printf
      ;add esp, 4
      add esi, 4
      cmp DWORD[esi], 0
      je .final
      push DWORD[esi]
      call atoi
      add esp, 4
      mov DWORD [inp], eax
      mov eax, DWORD[inp]
      sub eax, 1
      mov DWORD[comp], eax
      cmp DWORD [inp], 0
      jl .neg
      cmp DWORD [inp], 1
      je .one
      cmp DWORD [inp], 2
      je .two
      jg .fib

    .neg:
      push DWORD[neg]
      push output
      call printf
      add esp, 8
      jmp .loop

    .one:
      push DWORD[a]
      push output
      call printf
      add esp, 8
      jmp .loop

    .two:
      push DWORD[b]
      push output
      call printf
      add esp, 8
      jmp .loop

    .fib:
      mov eax, DWORD[a]
      add eax, DWORD[b]
      mov DWORD[c], eax
      ;push DWORD[c]
      ;push output
      ;call printf
      ;add esp, 8
      mov edx, DWORD[b]
      mov DWORD[a], edx
      mov edx, DWORD[c]
      mov DWORD[b], edx
      mov eax, DWORD[comp]
      inc DWORD[i]
      cmp DWORD[i], eax
      jl .fib
      push DWORD[c]
      push output
      call printf
      add esp, 8
      mov DWORD[a], 0
      mov DWORD[b], 1
      mov DWORD[c], 0
      mov DWORD[i], 1
      jmp .loop

    .final:
      xor eax, eax
      leave
      ret
